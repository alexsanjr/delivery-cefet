#!/bin/bash

# Delivery CEFET - Kong Gateway Quick Commands
# Navegue para a pasta kong-gateway antes de executar

echo "üöÄ Delivery CEFET - Kong Gateway Commands"
echo "========================================"

case "$1" in
  "start")
    echo "üü¢ Iniciando todos os servi√ßos..."
    docker compose up -d
    echo "‚è≥ Aguardando inicializa√ß√£o completa..."
    sleep 10
    echo "üîß Executando configura√ß√£o inicial do Kong..."
    ./scripts/init-kong.sh
    echo "‚úÖ Todos os servi√ßos iniciados e configurados!"
    ;;
    
  "stop")
    echo "üî¥ Parando todos os servi√ßos..."
    docker compose down
    echo "‚úÖ Todos os servi√ßos foram parados."
    ;;
    
  "status")
    echo "üìä Status dos containers:"
    docker compose ps
    ;;
    
  "logs")
    if [ -z "$2" ]; then
      echo "üìã Logs de todos os servi√ßos:"
      docker compose logs --tail=20
    else
      echo "üìã Logs do servi√ßo $2:"
      docker compose logs "$2" --tail=50
    fi
    ;;
    
  "test")
    echo "üß™ Testando Kong Gateway..."
    echo "Kong Status:"
    curl -s http://localhost:8001/status | jq .
    echo -e "\nüß™ Testando msorders:"
    curl -s -X POST http://localhost:8000/api/orders/graphql \
      -H "Content-Type: application/json" \
      -d '{"query":"{ __schema { types { name } } }"}' | jq .data.__schema.types[0:3]
    echo -e "\nüß™ Testando mscustomers:"
    curl -s -X POST http://localhost:8000/api/customers/graphql \
      -H "Content-Type: application/json" \
      -d '{"query":"{ customers { id name email } }"}' | jq .
    ;;
    
  "rebuild")
    if [ -z "$2" ]; then
      echo "‚ùå Especifique o servi√ßo para rebuild: ./commands.sh rebuild msorders"
      exit 1
    fi
    echo "üî® Rebuilding $2..."
    docker compose stop "$2"
    docker compose build "$2" --no-cache
    docker compose up "$2" -d
    echo "‚úÖ $2 reconstru√≠do com sucesso!"
    ;;
    
  "migrate")
    if [ -z "$2" ]; then
      echo "‚ùå Especifique o servi√ßo: ./commands.sh migrate msorders"
      exit 1
    fi
    if [ "$2" = "msorders" ]; then
      echo "üóÑÔ∏è  Executando migrations para msorders..."
      docker compose exec msorders npx prisma migrate dev --name migration
    elif [ "$2" = "mscustomers" ]; then
      echo "üóÑÔ∏è  Executando migrations para mscustomers..."
      docker compose exec mscustomers npx prisma migrate dev --name migration --schema ./src/prisma/schema.prisma
    else
      echo "‚ùå Servi√ßo n√£o reconhecido. Use: msorders ou mscustomers"
    fi
    ;;
    
  "seed")
    if [ -z "$2" ]; then
      echo "‚ùå Especifique o servi√ßo: ./commands.sh seed msorders"
      exit 1
    fi
    if [ "$2" = "msorders" ]; then
      echo "üå± Executando seed para msorders..."
      docker compose exec msorders npx prisma db seed
    elif [ "$2" = "mscustomers" ]; then
      echo "üå± Executando seed para mscustomers..."
      docker compose exec mscustomers npx prisma db seed --schema ./src/prisma/schema.prisma
    else
      echo "‚ùå Servi√ßo n√£o reconhecido. Use: msorders ou mscustomers"
    fi
    ;;
    
  "kong-services")
    echo "üåê Servi√ßos registrados no Kong:"
    curl -s http://localhost:8001/services | jq '.data[] | {name: .name, url: .url}'
    echo -e "\nüõ£Ô∏è  Rotas configuradas no Kong:"
    curl -s http://localhost:8001/routes | jq '.data[] | {name: .name, paths: .paths, service: .service.name}'
    ;;
    
  "init-kong")
    echo "üîß Re-executando configura√ß√£o do Kong..."
    ./scripts/init-kong.sh
    echo "‚úÖ Kong reconfigurado!"
    ;;
    
  "add-service")
    if [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
      echo "‚ùå Uso: ./commands.sh add-service <service-name> <service-url> <route-path>"
      echo "   Exemplo: ./commands.sh add-service msproducts http://msproducts:3000 /api/products"
      echo "   üí° Dica: Para servi√ßos principais, edite scripts/init-kong.sh"
      exit 1
    fi
    echo "‚ûï Adicionando servi√ßo $2..."
    # Criar servi√ßo
    curl -X POST http://localhost:8001/services \
      --data name="$2-service" \
      --data url="$3"
    echo -e "\n‚ûï Criando rota $4..."
    # Criar rota
    curl -X POST http://localhost:8001/services/"$2-service"/routes \
      --data paths[]="$4" \
      --data methods[]=GET \
      --data methods[]=POST \
      --data methods[]=PUT \
      --data methods[]=DELETE
    echo -e "\n‚úÖ Servi√ßo $2 adicionado com sucesso!"
    echo "üí° Para tornar permanente, adicione ao scripts/init-kong.sh"
    ;;
    
  "clean")
    echo "üßπ Limpando containers e volumes..."
    docker compose down -v
    docker system prune -f
    echo "‚úÖ Limpeza conclu√≠da!"
    ;;
    
  "monitor")
    echo "üìà Iniciando monitoramento em tempo real..."
    echo "Pressione Ctrl+C para parar"
    watch -n 2 "echo '=== STATUS DOS CONTAINERS ===' && docker compose ps && echo -e '\n=== USO DE RECURSOS ===' && docker stats --no-stream"
    ;;
    
  "help"|"")
    echo "Comandos dispon√≠veis:"
    echo "  start                    - Iniciar todos os servi√ßos"
    echo "  stop                     - Parar todos os servi√ßos"
    echo "  status                   - Ver status dos containers"
    echo "  logs [service]           - Ver logs (todos ou de um servi√ßo espec√≠fico)"
    echo "  test                     - Testar Kong e microsservi√ßos"
    echo "  rebuild <service>        - Reconstruir um microsservi√ßo"
    echo "  migrate <service>        - Executar migrations do Prisma"
    echo "  seed <service>           - Executar seeds do Prisma"
    echo "  kong-services            - Listar servi√ßos e rotas do Kong"
    echo "  init-kong                - Re-executar configura√ß√£o inicial do Kong"
    echo "  add-service <name> <url> <path> - Adicionar novo servi√ßo no Kong (tempor√°rio)"
    echo "  clean                    - Limpar containers e volumes"
    echo "  monitor                  - Monitoramento em tempo real"
    echo "  help                     - Mostrar esta ajuda"
    echo ""
    echo "Exemplos:"
    echo "  ./commands.sh start"
    echo "  ./commands.sh logs msorders"
    echo "  ./commands.sh rebuild mscustomers"
    echo "  ./commands.sh migrate msorders"
    echo "  ./commands.sh add-service msproducts http://msproducts:3000 /api/products"
    ;;
    
  *)
    echo "‚ùå Comando '$1' n√£o reconhecido. Use './commands.sh help' para ver os comandos dispon√≠veis."
    exit 1
    ;;
esac