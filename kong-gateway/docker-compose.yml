# docker-compose.yml

services:
  # PostgreSQL para Kong
  kong-database:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  # PostgreSQL para Konga - COM HEALTHCHECK
  konga-database:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: konga
    ports:
      - "5433:5432"
    volumes:
      - konga_data:/var/lib/postgresql/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d konga"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Migração do Kong
  kong-migration:
    image: kong:3.4
    command: "kong migrations bootstrap"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${POSTGRES_USER}
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - kong-net
    restart: on-failure

  # Kong Gateway
  kong:
    image: kong:3.4
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${POSTGRES_USER}
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
      
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      
      KONG_LOG_LEVEL: info
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10

  # Konga UI
  konga:
    image: pantsel/konga:latest
    environment:
      DB_ADAPTER: ${DB_ADAPTER}
      DB_HOST: ${DB_HOST}  
      DB_USER: ${DB_USER}           
      DB_PASSWORD: ${DB_PASSWORD}       
      DB_DATABASE: ${DB_DATABASE}       
      TOKEN_SECRET: kongasecret
      NODE_ENV: ${NODE_ENV}
      # Configurações adicionais para evitar timeout
      DB_POOL_SIZE: 5
      DB_CONNECTION_TIMEOUT: 60000
    ports:
      - "1337:1337"
    volumes:
      - ./scripts/wait-for-db.sh:/wait-for-db.sh
    depends_on:
      - konga-database
    networks:
      - kong-net
    command: sh -c "sleep 30 && node /app/app.js"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Microsserviço msorders
  msorders:
    build: ../msorders
    ports:
      - "3001:3000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_ORDERS_USER}:${POSTGRES_ORDERS_PASSWORD}@postgres-orders:5432/${POSTGRES_ORDERS_DB}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      postgres-orders:
        condition: service_healthy
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL do msorders
  postgres-orders:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_ORDERS_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ORDERS_PASSWORD}
      POSTGRES_DB: ${POSTGRES_ORDERS_DB}
    ports:
      - "5434:5432"
    volumes:
      - postgres_orders_data:/var/lib/postgresql/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_ORDERS_USER} -d ${POSTGRES_ORDERS_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Microsserviço mscustomers
  mscustomers:
    build: ../mscustomers
    ports:
      - "3002:3000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_CUSTOMERS_USER}:${POSTGRES_CUSTOMERS_PASSWORD}@postgres-customers:5432/${POSTGRES_CUSTOMERS_DB}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      postgres-customers:
        condition: service_healthy
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL do mscustomers
  postgres-customers:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_CUSTOMERS_USER}
      POSTGRES_PASSWORD: ${POSTGRES_CUSTOMERS_PASSWORD}
      POSTGRES_DB: ${POSTGRES_CUSTOMERS_DB}
    ports:
      - "5435:5432"
    volumes:
      - postgres_customers_data:/var/lib/postgresql/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_CUSTOMERS_USER} -d ${POSTGRES_CUSTOMERS_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
  
  # msnotifications
  msnotifications:
    build: ../msnotifications
    ports:
      - "${MSNOTIFICATIONS_PORT}:3000"
      - "${MSNOTIFICATIONS_GRPC_PORT}:50051" 
    environment:
      NODE_ENV: ${NODE_ENV}
      REDIS_URL: ${REDIS_URL}
      GRPC_URL: msnotifications:${MSNOTIFICATIONS_GRPC_PORT}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/graphql"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # redis msnotifications
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  kong_data:
  konga_data:
  postgres_orders_data:
  postgres_customers_data:
  redis_data:

networks:
  kong-net:
    driver: bridge