type Order {
  id: Int!
  customerId: Int # TODO: Transformar em obrigatório depois
  customerName: String
  customerEmail: String
  customerPhone: String
  customerIsPremium: Boolean
  customerAddresses: [CustomerAddress!]
  status: OrderStatus!
  items: [OrderItem!]!
  #deliveryAddress: String!
  subtotal: Float!
  deliveryFee: Float!
  total: Float!
  paymentMethod: PaymentMethod!
  estimatedDeliveryTime: Int! # em minutos
  createdAt: String!
  updatedAt: String!
}

type CustomerAddress {
  id: Int!
  street: String!
  number: String!
  complement: String
  neighborhood: String!
  city: String!
  state: String!
  zipCode: String!
  isDefault: Boolean!
}

type OrderItem {
  id: Int!
  productId: Int
  name: String!
  description: String
  quantity: Int!
  price: Float!
}

input CreateOrderInput {
  customerId: Int # TODO: Transformar em obrigatório depois
  items: [OrderItemInput!]!
  #deliveryAddress: DeliveryAddressInput!
  paymentMethod: PaymentMethod!
}

input OrderItemInput {
  productId: Int!
  quantity: Int!
}

input UpdateOrderInput {
  id: Int!
  status: OrderStatus!
}

type Query {
  orders: [Order]!
  order(id: Int!): Order
  customerOrders(customerId: Int!): [Order]!
}

type Mutation {
  createOrder(createOrderInput: CreateOrderInput!): Order!
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!
}



enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  ARRIVING
  DELIVERED
  CANCELLED
}
enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  CASH
}