type Customer {
  id: Int!
  name: String!
  email: String!
  phone: String!
  addresses: [Address!]!
  isPremium: Boolean!
  createdAt: String!
  updatedAt: String!
}

type Address {
  id: Int!
  street: String!        # ← era "rua"
  number: String!        # ← era "numero"
  neighborhood: String!  # ← era "bairro"
  city: String!          # ← era "cidade"
  state: String!         # ← era "estado"
  zipCode: String!       # ← era "cep"
  complement: String     # ← era "complemento"
  isPrimary: Boolean!    # ← era "principal"
  createdAt: String!
}

input CreateCustomerInput {
  name: String!
  email: String!
  phone: String!
  address: CreateAddressInput
  isPremium: Boolean!
}

input UpdateCustomerInput {
  name: String
  phone: String
  isPremium: Boolean
}

input CreateAddressInput {
  street: String!        # ← era "rua"
  number: String!        # ← era "numero"
  neighborhood: String!  # ← era "bairro"
  city: String!          # ← era "cidade"
  state: String!         # ← era "estado"
  zipCode: String!       # ← era "cep"
  complement: String     # ← era "complemento"
  isPrimary: Boolean     # ← era "principal"
}

input UpdateAddressInput {
  street: String        # ← era "rua"
  number: String        # ← era "numero"
  neighborhood: String  # ← era "bairro"
  city: String          # ← era "cidade"
  state: String         # ← era "estado"
  zipCode: String       # ← era "cep"
  complement: String    # ← era "complemento"
  isPrimary: Boolean    # ← era "principal"
}

type Query {
  customers: [Customer!]!
  customer(id: Int!): Customer
  customerByEmail(email: String!): Customer
}

type Mutation {
  createCustomer(input: CreateCustomerInput!): Customer!
  updateCustomer(id: Int!, input: UpdateCustomerInput!): Customer!
  addAddress(customerId: Int!, input: CreateAddressInput!): Customer!
  updateAddress(addressId: Int!, input: UpdateAddressInput!): Address!
  setPrimaryAddress(customerId: Int!, addressId: Int!): Customer!
  removeAddress(addressId: Int!): Boolean!
}